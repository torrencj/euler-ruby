#!/usr/bin/ruby -w

# Each new term in the Fibonacci sequence is generated by adding
# the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
# By considering the terms in the Fibonacci sequence whose values do not
# exceed four million, find the sum of the even-valued terms.

# Define a function to produce the Fibonacci sequence.

def Fibonacci1 (n)
  c = 0
  p = Array.new(n)

  while c < n
    c += 1

    if c <= 2
      p[c] = c
    else
      sum1 = p[c-1] + p[c-2]
      p[c] = sum1
    end
  end
  return p.last
end


# define a function to stop at given value and sum the evens

def Fibonacci2 (n)
  c = 0
  sum = 0
  p = Array.new(1) {1}

  while p.last < n
    c += 1

    if c <= 2
      p[c] = c
    else
      sum1 = p[c-1] + p[c-2]
      p[c] = sum1
    end
    if p[c] % 2 == 0
      sum += p[c]
    end
  end
  # sum each even
  puts "Sum = #{sum}"
  return c
end

# puts Fibonacci1(33)
puts "n= #{Fibonacci2(4000000)}"

# I would assume this is quite slow compared to a more elegant mathematical solution.
